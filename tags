!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACK	util.h	18;"	d
APP_PKT	util.h	21;"	d
FALSE	main.h	15;"	d
FINISH	util.h	22;"	d
FLAGS	Makefile	/^FLAGS=-DDEBUG -g$/;"	m
HEADERS	Makefile	/^HEADERS=$(SOURCES:.c=.h)$/;"	m
InFinish	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish} state_t;$/;"	e	enum:__anon4
InMonitor	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish} state_t;$/;"	e	enum:__anon4
InRun	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish} state_t;$/;"	e	enum:__anon4
InSection	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish} state_t;$/;"	e	enum:__anon4
InWant	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish} state_t;$/;"	e	enum:__anon4
LAMPORTH	lamport.h	2;"	d
MAINH	main.h	2;"	d
MPI_PAKIET_T	util.c	/^MPI_Datatype MPI_PAKIET_T;$/;"	v
MSG_LIST_GC	g_variables.h	/^int* MSG_LIST_GC;$/;"	v
MSG_LIST_GD	common_variables.h	/^packet_t* MSG_LIST_GD;/;"	v
MSG_LIST_VENUE	g_variables.h	/^int* MSG_LIST_VENUE;$/;"	v
NITEMS	util.h	14;"	d
RELEASE	util.h	20;"	d
REQUEST	util.h	19;"	d
REQUEST_QUEUE_H	request_queue.h	2;"	d
REQ_CLOCK_GC	g_variables.h	/^int REQ_CLOCK_GC;$/;"	v
REQ_CLOCK_GD	g_variables.h	/^int REQ_CLOCK_GD;$/;"	v
REQ_CLOCK_VENUE	g_variables.h	/^int REQ_CLOCK_VENUE;$/;"	v
ROOT	main.h	19;"	d
Request	request_queue.h	/^} Request;$/;"	t	typeref:struct:__anon1
RequestQueue	request_queue.h	/^} RequestQueue;$/;"	t	typeref:struct:__anon2
SEC_IN_STATE	main.h	16;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard *.c)$/;"	m
STATE_CHANGE_PROB	main.h	17;"	d
TRUE	main.h	14;"	d
UTILH	util.h	2;"	d
VENUE_INDEX	g_variables.h	/^int VENUE_INDEX;/;"	v
VENUE_REQ_QUEUE	g_variables.h	/^int* VENUE_REQ_QUEUE;$/;"	v
WATEK_GLOWNY_H	watek_glowny.h	2;"	d
WATEK_KOMUNIKACYJNY_H	watek_komunikacyjny.h	2;"	d
ackCount	main.c	/^int ackCount = 0;$/;"	v
add	request_queue.c	/^void add(RequestQueue* queue, int source, int clock) {$/;"	f
attach_debugger	main.c	/^void attach_debugger() {$/;"	f
canEnter	main.c	/^volatile int canEnter = 0;$/;"	v
capacity	request_queue.h	/^    int capacity;$/;"	m	struct:__anon2
changeState	util.c	/^void changeState( state_t newState )$/;"	f
checkCriticalSectionCondition	watek_komunikacyjny.c	/^void checkCriticalSectionCondition() {$/;"	f
check_thread_support	main.c	/^void check_thread_support(int provided)$/;"	f
clock	request_queue.h	/^    int clock;$/;"	m	struct:__anon1
clockMutex	lamport.c	/^pthread_mutex_t clockMutex = PTHREAD_MUTEX_INITIALIZER;/;"	v
data	util.h	/^    int data;     \/* przykładowe pole z danymi; można zmienić nazwę na bardziej pasującą *\/$/;"	m	struct:__anon3
debug	main.h	50;"	d
debug	main.h	52;"	d
finalizuj	main.c	/^void finalizuj()$/;"	f
freeRequestQueue	request_queue.c	/^void freeRequestQueue(RequestQueue* queue) {$/;"	f
getFirstSource	request_queue.c	/^int getFirstSource(RequestQueue* queue) {$/;"	f
inicjuj_typ_pakietu	util.c	/^void inicjuj_typ_pakietu()$/;"	f
initRequestQueue	request_queue.c	/^void initRequestQueue(RequestQueue* queue, int capacity) {$/;"	f
items	request_queue.h	/^    Request* items;$/;"	m	struct:__anon2
lamport	lamport.c	/^int lamport;$/;"	v
main	main.c	/^int main(int argc, char **argv)$/;"	f
mainLoop	watek_glowny.c	/^void mainLoop()$/;"	f
max	watek_komunikacyjny.c	4;"	d	file:
msgClock	main.c	/^int* msgClock;$/;"	v
name	util.c	/^    const char *name;$/;"	m	struct:tagNames_t	file:
packet_t	util.h	/^} packet_t;$/;"	t	typeref:struct:__anon3
printRequestQueue	request_queue.c	/^void printRequestQueue(RequestQueue* queue) {$/;"	f
println	main.h	56;"	d
rank	main.c	/^int rank, size;$/;"	v
removeItem	request_queue.c	/^void removeItem(RequestQueue* queue, int source) {$/;"	f
requestQueue	main.c	/^RequestQueue requestQueue;$/;"	v
sendPacket	util.c	/^void sendPacket(packet_t *pkt, int destination, int tag)$/;"	f
size	main.c	/^int rank, size;$/;"	v
size	request_queue.h	/^    int size;$/;"	m	struct:__anon2
source	request_queue.h	/^    int source;$/;"	m	struct:__anon1
src	util.h	/^    int src;  $/;"	m	struct:__anon3
stan	util.c	/^state_t stan=InRun;$/;"	v
startKomWatek	watek_komunikacyjny.c	/^void *startKomWatek(void *ptr)$/;"	f
stateMut	util.c	/^pthread_mutex_t stateMut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
state_t	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish} state_t;$/;"	t	typeref:enum:__anon4
tag	util.c	/^    int tag;$/;"	m	struct:tagNames_t	file:
tag2string	util.c	/^const char *const tag2string( int tag )$/;"	f
tagNames	util.c	/^} tagNames[] = { { "pakiet aplikacyjny", APP_PKT }, { "finish", FINISH}, $/;"	v	typeref:struct:tagNames_t
tagNames_t	util.c	/^struct tagNames_t{$/;"	s	file:
threadKom	main.c	/^pthread_t threadKom;$/;"	v
ts	util.h	/^    int ts;       \/* timestamp (zegar lamporta *\/$/;"	m	struct:__anon3
